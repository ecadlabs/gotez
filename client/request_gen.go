package client

import (
	"context"
	"strings"
	"text/template"
)

// Code generated by generate.go DO NOT EDIT.

var path_BlockHeader = template.Must(template.New("path").Parse("/chains/{{.Chain}}/blocks/{{.Block}}/header{{with .Metadata}}?metadata={{.}}{{end}}"))

func (client *Client) BlockHeader(ctx context.Context, r *BlockRequest) (*BlockHeaderInfo, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_BlockHeader.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	response := new(BlockHeaderInfo)
	
	if err := client.request("GET", path.String(), response, ctx); err != nil {
		return nil, err
	}
	return response, nil
}

var path_Block = template.Must(template.New("path").Parse("/chains/{{.Chain}}/blocks/{{.Block}}{{with .Metadata}}?metadata={{.}}{{end}}"))

func (client *Client) Block(ctx context.Context, r *BlockRequest) (*BlockInfo, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_Block.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	response := new(BlockInfo)
	
	if err := client.request("GET", path.String(), response, ctx); err != nil {
		return nil, err
	}
	return response, nil
}

var path_Delegate = template.Must(template.New("path").Parse("/chains/{{.Chain}}/blocks/{{.Block}}/context/delegates/{{.PKH}}"))

func (client *Client) Delegate(ctx context.Context, r *DelegateRequest) (DelegateInfo, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_Delegate.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	response, err := newDelegateInfo(r.Protocol)
	if err != nil {
		return nil, err
	}
	
	if err := client.request("GET", path.String(), response, ctx); err != nil {
		return nil, err
	}
	return response, nil
}

var path_ContractBalance = template.Must(template.New("path").Parse("/chains/{{.Chain}}/blocks/{{.Block}}/context/contracts/{{.ID}}/balance"))

func (client *Client) ContractBalance(ctx context.Context, r *ContractRequest) (BigUint, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_ContractBalance.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	var response BigUint
	
	if err := client.request("GET", path.String(), &response, ctx); err != nil {
		return nil, err
	}
	return response, nil
}

var path_ContractBalanceAndFrozenBonds = template.Must(template.New("path").Parse("/chains/{{.Chain}}/blocks/{{.Block}}/context/contracts/{{.ID}}/balance_and_frozen_bonds"))

func (client *Client) ContractBalanceAndFrozenBonds(ctx context.Context, r *ContractRequest) (BigUint, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_ContractBalanceAndFrozenBonds.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	var response BigUint
	
	if err := client.request("GET", path.String(), &response, ctx); err != nil {
		return nil, err
	}
	return response, nil
}

