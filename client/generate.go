//go:build ignore

package main

import (
	"log"
	"os"
	"text/template"
)

type typeDef struct {
	Func         string
	RequestType  string
	Path         string
	Method       string
	ResponseType string
}

var types = []*typeDef{
	{
		RequestType:  "BlockRequest",
		Method:       "GET",
		Path:         "/chains/{{.Chain}}/blocks/{{.Block}}/header{{with .Metadata}}?metadata={{.}}{{end}}",
		Func:         "BlockHeader",
		ResponseType: "protocol.BlockHeaderInfo",
	},
	{
		RequestType:  "BlockRequest",
		Method:       "GET",
		Path:         "/chains/{{.Chain}}/blocks/{{.Block}}{{with .Metadata}}?metadata={{.}}{{end}}",
		Func:         "Block",
		ResponseType: "protocol.BlockInfo",
	},
}

const tplSrc = `package client

import (
	"context"
	"strings"
	"text/template"
	"github.com/ecadlabs/gotez/v2/protocol"
)

// Code generated by generate.go DO NOT EDIT.
{{range .}}
var path_{{.Func}} = template.Must(template.New("path").Parse("{{.Path}}"))

func (client *Client) {{.Func}}(ctx context.Context, r *{{.RequestType}}) (*{{.ResponseType}}, error) {
	tmp := *r
	if tmp.Chain == "" {
		tmp.Chain = client.Chain
	}

	var path strings.Builder
	if err := path_{{.Func}}.Execute(&path, &tmp); err != nil {
		return nil, err
	}

	var response {{.ResponseType}}
	if err := client.request("{{.Method}}", path.String(), &response, ctx); err != nil {
		return nil, err
	}
	return &response, nil
}
{{end}}
`

var tpl = template.Must(template.New("formatter").Parse(tplSrc))

const outName = "request_gen.go"

func main() {
	fd, err := os.Create(outName)
	if err != nil {
		log.Fatal(err)
	}
	defer fd.Close()
	if err = tpl.Execute(fd, types); err != nil {
		log.Fatal(err)
	}
}
