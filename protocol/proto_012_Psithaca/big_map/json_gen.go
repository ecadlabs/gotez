package big_map

import "encoding/json"

// Code generated by genmarshaller.go DO NOT EDIT.

type json_suppress_Update Update

func (self *Update) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_Update)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "update"
	return json.Marshal(tmp)
}


type json_suppress_Remove Remove

func (self *Remove) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_Remove)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "remove"
	return json.Marshal(tmp)
}


type json_suppress_Copy Copy

func (self *Copy) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_Copy)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "copy"
	return json.Marshal(tmp)
}


type json_suppress_Alloc Alloc

func (self *Alloc) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_Alloc)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "alloc"
	return json.Marshal(tmp)
}


