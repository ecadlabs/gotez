package lazy

import "encoding/json"

// Code generated by genmarshaller.go DO NOT EDIT.

type json_suppress_BigMap BigMap

func (self *BigMap) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_BigMap)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["kind"] = "big_map"
	return json.Marshal(tmp)
}


type json_suppress_BigMapUpdate BigMapUpdate

func (self *BigMapUpdate) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_BigMapUpdate)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "update"
	return json.Marshal(tmp)
}


type json_suppress_BigMapRemove BigMapRemove

func (self *BigMapRemove) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_BigMapRemove)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "remove"
	return json.Marshal(tmp)
}


type json_suppress_BigMapCopy BigMapCopy

func (self *BigMapCopy) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_BigMapCopy)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "copy"
	return json.Marshal(tmp)
}


type json_suppress_BigMapAlloc BigMapAlloc

func (self *BigMapAlloc) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_BigMapAlloc)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "alloc"
	return json.Marshal(tmp)
}


type json_suppress_SaplingState SaplingState

func (self *SaplingState) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_SaplingState)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["kind"] = "sapling_state"
	return json.Marshal(tmp)
}


type json_suppress_SaplingStateUpdate SaplingStateUpdate

func (self *SaplingStateUpdate) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_SaplingStateUpdate)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "update"
	return json.Marshal(tmp)
}


type json_suppress_SaplingStateRemove SaplingStateRemove

func (self *SaplingStateRemove) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_SaplingStateRemove)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "remove"
	return json.Marshal(tmp)
}


type json_suppress_SaplingStateCopy SaplingStateCopy

func (self *SaplingStateCopy) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_SaplingStateCopy)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "copy"
	return json.Marshal(tmp)
}


type json_suppress_SaplingStateAlloc SaplingStateAlloc

func (self *SaplingStateAlloc) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_SaplingStateAlloc)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["action"] = "alloc"
	return json.Marshal(tmp)
}


