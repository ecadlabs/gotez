package protocol

import (
	"encoding/hex"
	"testing"

	tz "github.com/ecadlabs/gotez"
	"github.com/stretchr/testify/require"
)

func TestDecodeOperations(t *testing.T) {
	type testCase struct {
		title  string
		src    string
		expect OperationContents
	}

	testCases := []testCase{
		{
			title: "activate_account",
			src:   "04c55cf02dbeecc978d9c84625dcae72bb77ea4fbd41f98b15efc63fa893d61d7d6eee4a2ce9427ac466804fe735e06e97e26da8236b6341b91c625d5e82b3524ec0a88cc982365e70f8a5b9bc65df2ea6d21ee244cc3a96fb33031c394c78b1179ff1b8a44237740c",
			expect: &ActivateAccount{
				PKH:    &Ed25519PublicKeyHash{0xc5, 0x5c, 0xf0, 0x2d, 0xbe, 0xec, 0xc9, 0x78, 0xd9, 0xc8, 0x46, 0x25, 0xdc, 0xae, 0x72, 0xbb, 0x77, 0xea, 0x4f, 0xbd},
				Secret: &[SecretBytesLen]byte{0x41, 0xf9, 0x8b, 0x15, 0xef, 0xc6, 0x3f, 0xa8, 0x93, 0xd6, 0x1d, 0x7d, 0x6e, 0xee, 0x4a, 0x2c, 0xe9, 0x42, 0x7a, 0xc4},
			},
		},
		{
			title: "seed_nonce_revelation",
			src:   "01000004d2000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f",
			expect: &SeedNonceRevelation{
				Level: 1234,
				Nonce: &[SeedNonceBytesLen]byte{
					0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d,
					0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
					0x0c, 0x0d, 0x0e, 0x0f,
				},
			},
		},
		{
			title: "ballot",
			src:   "060002298c03ed7d454a101eb7022bc95f7e5f41ac78000002cf7663cf120f3dc8189d5dc7d4d7a0483bcc53f3f18e700f5a2f5076aa8b9dc55c0066804fe735e06e97e26da8236b6341b91c625d5e82b3524ec0a88cc982365e70f8a5b9bc65df2ea6d21ee244cc3a96fb33031c394c78b1179ff1b8a44237740c",
			expect: &Ballot{
				Source: &Ed25519PublicKeyHash{0x2, 0x29, 0x8c, 0x3, 0xed, 0x7d, 0x45, 0x4a, 0x10, 0x1e, 0xb7, 0x2, 0x2b, 0xc9, 0x5f, 0x7e, 0x5f, 0x41, 0xac, 0x78},
				Period: 719,
				Proposal: &ProtocolHash{
					0x76, 0x63, 0xcf, 0x12, 0xf, 0x3d, 0xc8, 0x18, 0x9d, 0x5d, 0xc7, 0xd4, 0xd7, 0xa0, 0x48,
					0x3b, 0xcc, 0x53, 0xf3, 0xf1, 0x8e, 0x70, 0xf, 0x5a, 0x2f, 0x50, 0x76, 0xaa, 0x8b, 0x9d,
					0xc5, 0x5c,
				},
				Ballot: BallotYay,
			},
		},
		{
			title: "delegation",
			src:   "6e00e1ba5449f2938568ace14b5dd54f31936dc86722ba08e0eaa917f53800ff0002298c03ed7d454a101eb7022bc95f7e5f41ac78",
			expect: &Delegation{
				ManagerOperation: ManagerOperation{
					Source:       &Ed25519PublicKeyHash{0xe1, 0xba, 0x54, 0x49, 0xf2, 0x93, 0x85, 0x68, 0xac, 0xe1, 0x4b, 0x5d, 0xd5, 0x4f, 0x31, 0x93, 0x6d, 0xc8, 0x67, 0x22},
					Fee:          tz.BigUint{0xba, 0x8},
					Counter:      tz.BigUint{0xe0, 0xea, 0xa9, 0x17},
					GasLimit:     tz.BigUint{0xf5, 0x38},
					StorageLimit: tz.BigUint{0x0},
				},
				Delegate: tz.Some[PublicKeyHash](&Ed25519PublicKeyHash{0x2, 0x29, 0x8c, 0x3, 0xed, 0x7d, 0x45, 0x4a, 0x10, 0x1e, 0xb7, 0x2, 0x2b, 0xc9, 0x5f, 0x7e, 0x5f, 0x41, 0xac, 0x78}),
			},
		},
		{
			title: "proposals",
			src:   "05009425086a67fde5a00facd42fba4f2d2763a3d5e50000005200000020d57ed88be5a69815e39386a33f7dcad391f5f507e03b376e499272c86c6cf2a7",
			expect: &Proposals{
				Source: &Ed25519PublicKeyHash{0x94, 0x25, 0x8, 0x6a, 0x67, 0xfd, 0xe5, 0xa0, 0xf, 0xac, 0xd4, 0x2f, 0xba, 0x4f, 0x2d, 0x27, 0x63, 0xa3, 0xd5, 0xe5},
				Period: 82,
				Proposals: []*ProtocolHash{{
					0xd5, 0x7e, 0xd8, 0x8b, 0xe5, 0xa6, 0x98, 0x15, 0xe3, 0x93, 0x86, 0xa3, 0x3f, 0x7d, 0xca,
					0xd3, 0x91, 0xf5, 0xf5, 0x7, 0xe0, 0x3b, 0x37, 0x6e, 0x49, 0x92, 0x72, 0xc8, 0x6c, 0x6c,
					0xf2, 0xa7,
				}},
			},
		},
		{
			title: "endorsement",
			src:   "1519a5002792c30000000015b4d26b90b5a56f1333bb2b8f1fce2f121474c7a1e088235a9a24e2bfda5bdd",
			expect: &Endorsement{
				Slot:  6565,
				Level: 2593475,
				Round: 0,
				BlockPayloadHash: &BlockPayloadHash{
					0x15, 0xb4, 0xd2, 0x6b, 0x90, 0xb5, 0xa5, 0x6f, 0x13, 0x33, 0xbb, 0x2b, 0x8f, 0x1f,
					0xce, 0x2f, 0x12, 0x14, 0x74, 0xc7, 0xa1, 0xe0, 0x88, 0x23, 0x5a, 0x9a, 0x24, 0xe2,
					0xbf, 0xda, 0x5b, 0xdd,
				},
			},
		},
		{
			title: "preendorsement",
			src:   "1419e60027926000000000c02203b1c970f9894c2d555e87e7b12c86e343fc0127c2da846fd8ee6dcc5a4c",
			expect: &Preendorsement{
				Slot:  6630,
				Level: 2593376,
				Round: 0,
				BlockPayloadHash: &BlockPayloadHash{
					0xc0, 0x22, 0x03, 0xb1, 0xc9, 0x70, 0xf9, 0x89, 0x4c, 0x2d, 0x55, 0x5e, 0x87, 0xe7,
					0xb1, 0x2c, 0x86, 0xe3, 0x43, 0xfc, 0x01, 0x27, 0xc2, 0xda, 0x84, 0x6f, 0xd8, 0xee,
					0x6d, 0xcc, 0x5a, 0x4c,
				},
			},
		},
		{
			title: "endorsement_with_slot",
			src:   "0a00000065a60703a9567bf69ec66b368c3d8562eba4cbf29278c2c10447a684e3aa143685000008773b0ef3e51b218d04c29211b89f5b7582a7169b4810e6dbe46732b44c84331ae6cb32ced7c53ef55e7a2358ed66dedcb98daff1d8ec4f0638f74f215083526d2e030002",
			expect: &EndorsementWithSlot{
				Endorsement: InlinedEmmyEndorsement{
					Branch: &BlockHash{
						0xa6, 0x7, 0x3, 0xa9, 0x56, 0x7b, 0xf6, 0x9e, 0xc6, 0x6b, 0x36, 0x8c, 0x3d, 0x85, 0x62,
						0xeb, 0xa4, 0xcb, 0xf2, 0x92, 0x78, 0xc2, 0xc1, 0x4, 0x47, 0xa6, 0x84, 0xe3, 0xaa,
						0x14, 0x36, 0x85,
					},
					Contents: &EmmyEndorsement{
						Level: 554811,
					},
					Signature: &Signature{
						0xe, 0xf3, 0xe5, 0x1b, 0x21, 0x8d, 0x4, 0xc2, 0x92, 0x11, 0xb8, 0x9f, 0x5b, 0x75, 0x82,
						0xa7, 0x16, 0x9b, 0x48, 0x10, 0xe6, 0xdb, 0xe4, 0x67, 0x32, 0xb4, 0x4c, 0x84, 0x33,
						0x1a, 0xe6, 0xcb, 0x32, 0xce, 0xd7, 0xc5, 0x3e, 0xf5, 0x5e, 0x7a, 0x23, 0x58, 0xed,
						0x66, 0xde, 0xdc, 0xb9, 0x8d, 0xaf, 0xf1, 0xd8, 0xec, 0x4f, 0x6, 0x38, 0xf7, 0x4f,
						0x21, 0x50, 0x83, 0x52, 0x6d, 0x2e, 0x3,
					},
				},
				Slot: 2,
			},
		},
		{
			title: "reveal",
			src:   "6b00150da49bcb649acc43f2434549433d90f3d1f7f1e702cb960be8070000f1ccb8d80895b314a26739b5713b8934e34f96f8f3c9137de5c8edeb1f925da1",
			expect: &Reveal{
				ManagerOperation: ManagerOperation{
					Source: &Ed25519PublicKeyHash{
						0x15, 0xd, 0xa4, 0x9b, 0xcb, 0x64, 0x9a, 0xcc, 0x43, 0xf2, 0x43, 0x45, 0x49, 0x43, 0x3d,
						0x90, 0xf3, 0xd1, 0xf7, 0xf1,
					},
					Fee:          tz.BigUint{0xe7, 0x2},
					Counter:      tz.BigUint{0xcb, 0x96, 0xb},
					GasLimit:     tz.BigUint{0xe8, 0x7},
					StorageLimit: tz.BigUint{0x0},
				},
				PublicKey: &Ed25519PublicKey{
					0xf1, 0xcc, 0xb8, 0xd8, 0x8, 0x95, 0xb3, 0x14, 0xa2, 0x67, 0x39, 0xb5, 0x71, 0x3b, 0x89,
					0x34, 0xe3, 0x4f, 0x96, 0xf8, 0xf3, 0xc9, 0x13, 0x7d, 0xe5, 0xc8, 0xed, 0xeb, 0x1f, 0x92,
					0x5d, 0xa1,
				},
			},
		},
		{
			title: "double_baking_evidence",
			src:   "03000000cf001da8ad0b217176bbe8bd17e29da3836de3594b4180ea989ddc0bce1983fa4aa0395640b30000000061b82c7e0428e8cf0fbd20c7c0aeabcd9e8b1bf151f2ba2337447487ee65848a4c570a566a00000011000000010100000008000000000013a8ad0510e2c339933afe50498f2b7d2b3c0b27263414f09406946f05ca285b8338cb00000e7a0e9a72810100000097e539e028526e0b32eb7eb51236e8c67a1b292df19e67e80ab19a2b9d68ae595abc31c9f5ca1a000a5a8d759ec0f92af657e6b8a3da8097ffcdf4333f552c0c000000cf001da8ad0b217176bbe8bd17e29da3836de3594b4180ea989ddc0bce1983fa4aa0395640b30000000061b82c7e047cccf5f7b06835ce15d66d6246e1c78bcdbb52bf13787a4168c530f69cf5625700000011000000010100000008000000000013a8ad4e9a0681bd302fc201913a2905d76cf28b5d150f1b98d1f9b876e7459fe2fb6100000e7a0e9a0cf701000000477fb0e9e798799d5434a0d5c4137e17fb660e12551b785be68d7943bc6daca4c8b222f779f137e1baee9906b39b5584b4bf452002490feaa8876f6c293e2009",
			expect: &DoubleBakingEvidence{
				Block1: ShellHeader{
					Level: 1943725,
					Proto: 11,
					Predecessor: &BlockHash{
						0x21, 0x71, 0x76, 0xbb, 0xe8, 0xbd, 0x17, 0xe2, 0x9d, 0xa3, 0x83, 0x6d, 0xe3, 0x59,
						0x4b, 0x41, 0x80, 0xea, 0x98, 0x9d, 0xdc, 0xb, 0xce, 0x19, 0x83, 0xfa, 0x4a, 0xa0,
						0x39, 0x56, 0x40, 0xb3,
					},
					Timestamp:      tz.Timestamp(1639459966),
					ValidationPass: 4,
					OperationsHash: &OperationsHash{
						0x28, 0xe8, 0xcf, 0xf, 0xbd, 0x20, 0xc7, 0xc0, 0xae, 0xab, 0xcd, 0x9e, 0x8b, 0x1b,
						0xf1, 0x51, 0xf2, 0xba, 0x23, 0x37, 0x44, 0x74, 0x87, 0xee, 0x65, 0x84, 0x8a, 0x4c,
						0x57, 0xa, 0x56, 0x6a,
					},
					Fitness: []byte{
						0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13, 0xa8, 0xad,
					},
					Context: &ContextHash{
						0x5, 0x10, 0xe2, 0xc3, 0x39, 0x93, 0x3a, 0xfe, 0x50, 0x49, 0x8f, 0x2b, 0x7d, 0x2b,
						0x3c, 0xb, 0x27, 0x26, 0x34, 0x14, 0xf0, 0x94, 0x6, 0x94, 0x6f, 0x5, 0xca, 0x28, 0x5b,
						0x83, 0x38, 0xcb,
					},
				},
				Block2: ShellHeader{
					Level: 1943725,
					Proto: 11,
					Predecessor: &BlockHash{
						0x21, 0x71, 0x76, 0xbb, 0xe8, 0xbd, 0x17, 0xe2, 0x9d, 0xa3, 0x83, 0x6d, 0xe3, 0x59,
						0x4b, 0x41, 0x80, 0xea, 0x98, 0x9d, 0xdc, 0xb, 0xce, 0x19, 0x83, 0xfa, 0x4a, 0xa0,
						0x39, 0x56, 0x40, 0xb3,
					},
					Timestamp:      tz.Timestamp(1639459966),
					ValidationPass: 4,
					OperationsHash: &OperationsHash{
						0x7c, 0xcc, 0xf5, 0xf7, 0xb0, 0x68, 0x35, 0xce, 0x15, 0xd6, 0x6d, 0x62, 0x46, 0xe1,
						0xc7, 0x8b, 0xcd, 0xbb, 0x52, 0xbf, 0x13, 0x78, 0x7a, 0x41, 0x68, 0xc5, 0x30, 0xf6,
						0x9c, 0xf5, 0x62, 0x57,
					},
					Fitness: []byte{
						0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13, 0xa8, 0xad,
					},
					Context: &ContextHash{
						0x4e, 0x9a, 0x6, 0x81, 0xbd, 0x30, 0x2f, 0xc2, 0x1, 0x91, 0x3a, 0x29, 0x5, 0xd7, 0x6c,
						0xf2, 0x8b, 0x5d, 0x15, 0xf, 0x1b, 0x98, 0xd1, 0xf9, 0xb8, 0x76, 0xe7, 0x45, 0x9f,
						0xe2, 0xfb, 0x61,
					},
				},
			},
		},
		{
			title: "double_preendorsement_evidence",
			src:   "070000008b8b87b048db84d61c6d8ceaf13538ccf2bbaf2017fb5d804b77aa58ebe088520d1400000004a2e80000000009a56da0405f15df6064b4d704eb9fe6fdaf885a513ed7ba189eb5321d97386f9734c876e5b4df19fc457c6cb308bcad79ca806ad4950f4e7c3118703ecbdd67c77d63c7040fb923c78ee86300b3040bb3d2c6865e69253c57674161cfe261690000008b8b87b048db84d61c6d8ceaf13538ccf2bbaf2017fb5d804b77aa58ebe088520d1400000004a2e800000000ca774e93ab507f6781b8c0312895cfcbb5f5b7df9c261602c7ec71f9e531ae972e36bcd26702165dec701fe072bd07d0bd776da1e9658d0b62806ce17daa06e593eec7d781f9ab4f6b3e8d8c8531072c6f262187144cf2c97c3aa8710ee2304d",
			expect: &DoublePreendorsementEvidence{
				Op1: InlinedPreendorsement{
					Branch: &BlockHash{
						0x8b, 0x87, 0xb0, 0x48, 0xdb, 0x84, 0xd6, 0x1c, 0x6d, 0x8c, 0xea, 0xf1, 0x35, 0x38,
						0xcc, 0xf2, 0xbb, 0xaf, 0x20, 0x17, 0xfb, 0x5d, 0x80, 0x4b, 0x77, 0xaa, 0x58, 0xeb,
						0xe0, 0x88, 0x52, 0xd,
					},
					Signature: &Signature{
						0x97, 0x34, 0xc8, 0x76, 0xe5, 0xb4, 0xdf, 0x19, 0xfc, 0x45, 0x7c, 0x6c, 0xb3, 0x8,
						0xbc, 0xad, 0x79, 0xca, 0x80, 0x6a, 0xd4, 0x95, 0xf, 0x4e, 0x7c, 0x31, 0x18, 0x70,
						0x3e, 0xcb, 0xdd, 0x67, 0xc7, 0x7d, 0x63, 0xc7, 0x4, 0xf, 0xb9, 0x23, 0xc7, 0x8e,
						0xe8, 0x63, 0x0, 0xb3, 0x4, 0xb, 0xb3, 0xd2, 0xc6, 0x86, 0x5e, 0x69, 0x25, 0x3c,
						0x57, 0x67, 0x41, 0x61, 0xcf, 0xe2, 0x61, 0x69,
					},
					Contents: &Preendorsement{
						Slot:  0,
						Level: 303848,
						Round: 0,
						BlockPayloadHash: &BlockPayloadHash{
							0x9, 0xa5, 0x6d, 0xa0, 0x40, 0x5f, 0x15, 0xdf, 0x60, 0x64, 0xb4, 0xd7, 0x4,
							0xeb, 0x9f, 0xe6, 0xfd, 0xaf, 0x88, 0x5a, 0x51, 0x3e, 0xd7, 0xba, 0x18, 0x9e,
							0xb5, 0x32, 0x1d, 0x97, 0x38, 0x6f,
						},
					},
				},
				Op2: InlinedPreendorsement{
					Branch: &BlockHash{
						0x8b, 0x87, 0xb0, 0x48, 0xdb, 0x84, 0xd6, 0x1c, 0x6d, 0x8c, 0xea, 0xf1, 0x35, 0x38,
						0xcc, 0xf2, 0xbb, 0xaf, 0x20, 0x17, 0xfb, 0x5d, 0x80, 0x4b, 0x77, 0xaa, 0x58, 0xeb,
						0xe0, 0x88, 0x52, 0xd,
					},
					Signature: &Signature{
						0x2e, 0x36, 0xbc, 0xd2, 0x67, 0x2, 0x16, 0x5d, 0xec, 0x70, 0x1f, 0xe0, 0x72, 0xbd,
						0x7, 0xd0, 0xbd, 0x77, 0x6d, 0xa1, 0xe9, 0x65, 0x8d, 0xb, 0x62, 0x80, 0x6c, 0xe1,
						0x7d, 0xaa, 0x6, 0xe5, 0x93, 0xee, 0xc7, 0xd7, 0x81, 0xf9, 0xab, 0x4f, 0x6b, 0x3e,
						0x8d, 0x8c, 0x85, 0x31, 0x7, 0x2c, 0x6f, 0x26, 0x21, 0x87, 0x14, 0x4c, 0xf2, 0xc9,
						0x7c, 0x3a, 0xa8, 0x71, 0xe, 0xe2, 0x30, 0x4d,
					},
					Contents: &Preendorsement{
						Slot:  0,
						Level: 303848,
						Round: 0,
						BlockPayloadHash: &BlockPayloadHash{
							0xca, 0x77, 0x4e, 0x93, 0xab, 0x50, 0x7f, 0x67, 0x81, 0xb8, 0xc0, 0x31, 0x28,
							0x95, 0xcf, 0xcb, 0xb5, 0xf5, 0xb7, 0xdf, 0x9c, 0x26, 0x16, 0x2, 0xc7, 0xec,
							0x71, 0xf9, 0xe5, 0x31, 0xae, 0x97,
						},
					},
				},
			},
		},
		{
			title: "double_endorsement_evidence",
			src:   "020000008ba60703a9567bf69ec66b368c3d8562eba4cbf29278c2c10447a684e3aa1436851500010000007b0000007bca774e93ab507f6781b8c0312895cfcbb5f5b7df9c261602c7ec71f9e531ae97d3a9e1467b32104921d4e2dd93265739c1a5faee7a7f8880842b096c0b6714200c43fd5872f82581dfe1cb3a76ccdadaa4d6361d72b4abee6884cb7ed87f0b040000008b6280d069cca0c2c8c97c172cc0530e3861cf8050d80970866a388c19bcbbf15f1500010000007b0000007bca774e93ab507f6781b8c0312895cfcbb5f5b7df9c261602c7ec71f9e531ae970ef3e51b218d04c29211b89f5b7582a7169b4810e6dbe46732b44c84331ae6cb32ced7c53ef55e7a2358ed66dedcb98daff1d8ec4f0638f74f215083526d2e03",
			expect: &DoubleEndorsementEvidence{
				Op1: InlinedEndorsement{
					Branch: &BlockHash{
						0xa6, 0x7, 0x3, 0xa9, 0x56, 0x7b, 0xf6, 0x9e, 0xc6, 0x6b, 0x36, 0x8c, 0x3d, 0x85,
						0x62, 0xeb, 0xa4, 0xcb, 0xf2, 0x92, 0x78, 0xc2, 0xc1, 0x4, 0x47, 0xa6, 0x84, 0xe3,
						0xaa, 0x14, 0x36, 0x85,
					},
					Signature: &Signature{
						0xd3, 0xa9, 0xe1, 0x46, 0x7b, 0x32, 0x10, 0x49, 0x21, 0xd4, 0xe2, 0xdd, 0x93, 0x26,
						0x57, 0x39, 0xc1, 0xa5, 0xfa, 0xee, 0x7a, 0x7f, 0x88, 0x80, 0x84, 0x2b, 0x9, 0x6c,
						0xb, 0x67, 0x14, 0x20, 0xc, 0x43, 0xfd, 0x58, 0x72, 0xf8, 0x25, 0x81, 0xdf, 0xe1,
						0xcb, 0x3a, 0x76, 0xcc, 0xda, 0xda, 0xa4, 0xd6, 0x36, 0x1d, 0x72, 0xb4, 0xab, 0xee,
						0x68, 0x84, 0xcb, 0x7e, 0xd8, 0x7f, 0xb, 0x4,
					},
					Contents: &Endorsement{
						Slot:  1,
						Level: 123,
						Round: 123,
						BlockPayloadHash: &BlockPayloadHash{
							0xca, 0x77, 0x4e, 0x93, 0xab, 0x50, 0x7f, 0x67, 0x81, 0xb8, 0xc0, 0x31, 0x28,
							0x95, 0xcf, 0xcb, 0xb5, 0xf5, 0xb7, 0xdf, 0x9c, 0x26, 0x16, 0x2, 0xc7, 0xec,
							0x71, 0xf9, 0xe5, 0x31, 0xae, 0x97,
						},
					},
				},
				Op2: InlinedEndorsement{
					Branch: &BlockHash{
						0x62, 0x80, 0xd0, 0x69, 0xcc, 0xa0, 0xc2, 0xc8, 0xc9, 0x7c, 0x17, 0x2c, 0xc0, 0x53,
						0xe, 0x38, 0x61, 0xcf, 0x80, 0x50, 0xd8, 0x9, 0x70, 0x86, 0x6a, 0x38, 0x8c, 0x19,
						0xbc, 0xbb, 0xf1, 0x5f,
					},
					Signature: &Signature{
						0xe, 0xf3, 0xe5, 0x1b, 0x21, 0x8d, 0x4, 0xc2, 0x92, 0x11, 0xb8, 0x9f, 0x5b, 0x75,
						0x82, 0xa7, 0x16, 0x9b, 0x48, 0x10, 0xe6, 0xdb, 0xe4, 0x67, 0x32, 0xb4, 0x4c, 0x84,
						0x33, 0x1a, 0xe6, 0xcb, 0x32, 0xce, 0xd7, 0xc5, 0x3e, 0xf5, 0x5e, 0x7a, 0x23, 0x58,
						0xed, 0x66, 0xde, 0xdc, 0xb9, 0x8d, 0xaf, 0xf1, 0xd8, 0xec, 0x4f, 0x6, 0x38, 0xf7,
						0x4f, 0x21, 0x50, 0x83, 0x52, 0x6d, 0x2e, 0x3,
					},
					Contents: &Endorsement{
						Slot:  1,
						Level: 123,
						Round: 123,
						BlockPayloadHash: &BlockPayloadHash{
							0xca, 0x77, 0x4e, 0x93, 0xab, 0x50, 0x7f, 0x67, 0x81, 0xb8, 0xc0, 0x31, 0x28,
							0x95, 0xcf, 0xcb, 0xb5, 0xf5, 0xb7, 0xdf, 0x9c, 0x26, 0x16, 0x2, 0xc7, 0xec,
							0x71, 0xf9, 0xe5, 0x31, 0xae, 0x97,
						},
					},
				},
				Slot: tz.None[uint16](),
			},
		},
	}

	for _, tc := range testCases {
		test := tc
		t.Run(test.title, func(t *testing.T) {
			buf, err := hex.DecodeString(test.src)
			require.NoError(t, err)
			var op OperationContents
			_, err = tz.Decode(buf, &op)
			require.NoError(t, err)
			require.Equal(t, test.expect, op)
		})
	}
}
