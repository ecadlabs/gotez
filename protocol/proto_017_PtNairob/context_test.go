package proto_017_PtNairob

import (
	"fmt"
	"testing"

	tz "github.com/ecadlabs/gotez/v2"
	"github.com/ecadlabs/gotez/v2/encoding"
	"github.com/ecadlabs/gotez/v2/protocol/core"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDelegateInfo(t *testing.T) {
	src := []byte{
		0x00, 0x00, 0x01, 0x89, 0xf9, 0xa8, 0xc0, 0x98, 0xe6, 0x40, 0xd0, 0x83, 0x9c, 0xc0, 0x9e, 0x35,
		0xd0, 0x83, 0x9c, 0xc0, 0x9e, 0x35, 0x86, 0xc4, 0xa4, 0xf6, 0xc4, 0x8f, 0x04, 0x00, 0x00, 0x00,
		0x01, 0x34, 0x01, 0xf1, 0x87, 0xe5, 0x51, 0xa5, 0xca, 0xd3, 0xc8, 0x72, 0x77, 0x02, 0x34, 0x35,
		0xe1, 0xb5, 0xa2, 0xa1, 0x9c, 0x8c, 0x82, 0x00, 0x01, 0xaf, 0xaf, 0x37, 0x26, 0x0c, 0x1a, 0x60,
		0x41, 0x68, 0xbf, 0xdd, 0xc6, 0x91, 0xd4, 0x59, 0xde, 0x23, 0x3d, 0xe3, 0x5c, 0x00, 0x01, 0xab,
		0x6a, 0x68, 0x33, 0x98, 0xd0, 0x67, 0x63, 0xe1, 0x5e, 0xd9, 0x0d, 0x6a, 0x99, 0x58, 0x2e, 0x97,
		0x4f, 0x79, 0xea, 0x00, 0x01, 0x8f, 0x20, 0x8e, 0x66, 0xc5, 0x90, 0x34, 0x8f, 0xf8, 0xef, 0x1d,
		0xf6, 0x4a, 0x0d, 0x57, 0x30, 0xa3, 0x58, 0xa7, 0xe0, 0x00, 0x01, 0x67, 0xc1, 0xb5, 0x2f, 0x7c,
		0xf1, 0xea, 0xa1, 0xe7, 0x67, 0xa5, 0x39, 0x1d, 0x5b, 0x87, 0xea, 0x93, 0x91, 0xf7, 0x2d, 0x00,
		0x01, 0x36, 0x82, 0x76, 0x73, 0xea, 0x8a, 0x53, 0xce, 0x36, 0x91, 0xf2, 0x33, 0x49, 0x2b, 0x44,
		0xbe, 0x01, 0xf0, 0x09, 0x04, 0x00, 0x01, 0x34, 0x89, 0xd4, 0x7a, 0x99, 0x73, 0xe3, 0x1a, 0xa4,
		0x41, 0xe0, 0x2a, 0x93, 0x8e, 0x5c, 0x59, 0x40, 0xa7, 0x46, 0x6c, 0x00, 0x01, 0x29, 0x93, 0xc1,
		0xa1, 0xbb, 0xa3, 0x22, 0x72, 0x71, 0xef, 0x7b, 0xae, 0x29, 0x82, 0x25, 0xf9, 0xde, 0x10, 0xcd,
		0x7b, 0x00, 0x01, 0x22, 0x61, 0xda, 0x9f, 0x57, 0x55, 0xed, 0x2c, 0x8d, 0xe5, 0x4e, 0x3b, 0x6b,
		0x0b, 0x62, 0xdd, 0x0e, 0x09, 0x60, 0xb8, 0x00, 0x01, 0x18, 0x14, 0x2c, 0x7c, 0x24, 0x52, 0xdf,
		0xed, 0x9e, 0xc7, 0x7c, 0x89, 0x1e, 0x89, 0x7a, 0xc6, 0x8f, 0x22, 0x83, 0x3b, 0x00, 0x01, 0x0b,
		0xd7, 0xc6, 0xd1, 0x51, 0x70, 0x66, 0xc4, 0x9f, 0x74, 0x7c, 0xfd, 0xf6, 0x32, 0xff, 0x95, 0xd7,
		0x4d, 0xa9, 0x12, 0x00, 0x00, 0x02, 0xe1, 0x94, 0x71, 0xe8, 0x61, 0x1f, 0xcb, 0x03, 0xc3, 0x4c,
		0x45, 0x99, 0xb0, 0x19, 0xc9, 0xc8, 0x68, 0x67, 0xb4, 0x47, 0x00, 0x01, 0x7a, 0x06, 0x13, 0x3e,
		0x82, 0x4b, 0xf3, 0x62, 0xf2, 0x17, 0x0f, 0x91, 0x3c, 0x97, 0x16, 0x28, 0x51, 0xbb, 0x30, 0xfd,
		0x00, 0x00, 0x2a, 0x46, 0xca, 0x04, 0x2d, 0xb4, 0x1a, 0x95, 0xfe, 0x06, 0x82, 0x92, 0x59, 0x5c,
		0x55, 0x51, 0x02, 0xdb, 0xf4, 0x21, 0x8d, 0x9b, 0xe4, 0xdd, 0xde, 0xce, 0x03, 0x00, 0x00, 0x00,
		0x02, 0x75, 0xff, 0x00, 0x00, 0x10, 0x7b, 0x58, 0x96, 0xc3, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x14, 0x02, 0xe1, 0x94, 0x71, 0xe8, 0x61, 0x1f, 0xcb, 0x03, 0xc3, 0x4c, 0x45,
		0x99, 0xb0, 0x19, 0xc9, 0xc8, 0x68, 0x67, 0xb4, 0x47, 0x00, 0x00, 0x00, 0x00,
	}

	expect := DelegateInfo{
		FullBalance:           tz.BigUint{0xf9, 0xa8, 0xc0, 0x98, 0xe6, 0x40},
		CurrentFrozenDeposits: tz.BigUint{0xd0, 0x83, 0x9c, 0xc0, 0x9e, 0x35},
		FrozenDeposits:        tz.BigUint{0xd0, 0x83, 0x9c, 0xc0, 0x9e, 0x35},
		StakingBalance:        tz.BigUint{0x86, 0xc4, 0xa4, 0xf6, 0xc4, 0x8f, 0x4},
		FrozenDepositsLimit:   tz.None[tz.BigUint](),
		DelegatedContracts: []core.ContractID{
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0xf1, 0x87, 0xe5, 0x51, 0xa5, 0xca, 0xd3, 0xc8, 0x72, 0x77, 0x2, 0x34, 0x35, 0xe1, 0xb5, 0xa2, 0xa1, 0x9c, 0x8c, 0x82},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0xaf, 0xaf, 0x37, 0x26, 0xc, 0x1a, 0x60, 0x41, 0x68, 0xbf, 0xdd, 0xc6, 0x91, 0xd4, 0x59, 0xde, 0x23, 0x3d, 0xe3, 0x5c},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0xab, 0x6a, 0x68, 0x33, 0x98, 0xd0, 0x67, 0x63, 0xe1, 0x5e, 0xd9, 0xd, 0x6a, 0x99, 0x58, 0x2e, 0x97, 0x4f, 0x79, 0xea},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x8f, 0x20, 0x8e, 0x66, 0xc5, 0x90, 0x34, 0x8f, 0xf8, 0xef, 0x1d, 0xf6, 0x4a, 0xd, 0x57, 0x30, 0xa3, 0x58, 0xa7, 0xe0},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x67, 0xc1, 0xb5, 0x2f, 0x7c, 0xf1, 0xea, 0xa1, 0xe7, 0x67, 0xa5, 0x39, 0x1d, 0x5b, 0x87, 0xea, 0x93, 0x91, 0xf7, 0x2d},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x36, 0x82, 0x76, 0x73, 0xea, 0x8a, 0x53, 0xce, 0x36, 0x91, 0xf2, 0x33, 0x49, 0x2b, 0x44, 0xbe, 0x1, 0xf0, 0x9, 0x4},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x34, 0x89, 0xd4, 0x7a, 0x99, 0x73, 0xe3, 0x1a, 0xa4, 0x41, 0xe0, 0x2a, 0x93, 0x8e, 0x5c, 0x59, 0x40, 0xa7, 0x46, 0x6c},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x29, 0x93, 0xc1, 0xa1, 0xbb, 0xa3, 0x22, 0x72, 0x71, 0xef, 0x7b, 0xae, 0x29, 0x82, 0x25, 0xf9, 0xde, 0x10, 0xcd, 0x7b},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x22, 0x61, 0xda, 0x9f, 0x57, 0x55, 0xed, 0x2c, 0x8d, 0xe5, 0x4e, 0x3b, 0x6b, 0xb, 0x62, 0xdd, 0xe, 0x9, 0x60, 0xb8},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0x18, 0x14, 0x2c, 0x7c, 0x24, 0x52, 0xdf, 0xed, 0x9e, 0xc7, 0x7c, 0x89, 0x1e, 0x89, 0x7a, 0xc6, 0x8f, 0x22, 0x83, 0x3b},
				Padding:      0x0,
			},
			core.OriginatedContract{
				ContractHash: &tz.ContractHash{0xb, 0xd7, 0xc6, 0xd1, 0x51, 0x70, 0x66, 0xc4, 0x9f, 0x74, 0x7c, 0xfd, 0xf6, 0x32, 0xff, 0x95, 0xd7, 0x4d, 0xa9, 0x12},
				Padding:      0x0,
			},
			core.ImplicitContract{
				PublicKeyHash: &tz.P256PublicKeyHash{0xe1, 0x94, 0x71, 0xe8, 0x61, 0x1f, 0xcb, 0x3, 0xc3, 0x4c, 0x45, 0x99, 0xb0, 0x19, 0xc9, 0xc8, 0x68, 0x67, 0xb4, 0x47},
			},
			core.ImplicitContract{
				PublicKeyHash: &tz.Secp256k1PublicKeyHash{0x7a, 0x6, 0x13, 0x3e, 0x82, 0x4b, 0xf3, 0x62, 0xf2, 0x17, 0xf, 0x91, 0x3c, 0x97, 0x16, 0x28, 0x51, 0xbb, 0x30, 0xfd},
			},
			core.ImplicitContract{
				PublicKeyHash: &tz.Ed25519PublicKeyHash{0x2a, 0x46, 0xca, 0x4, 0x2d, 0xb4, 0x1a, 0x95, 0xfe, 0x6, 0x82, 0x92, 0x59, 0x5c, 0x55, 0x51, 0x2, 0xdb, 0xf4, 0x21},
			},
		},
		DelegatedBalance:     tz.BigUint{0x8d, 0x9b, 0xe4, 0xdd, 0xde, 0xce, 0x3},
		Deactivated:          false,
		GracePeriod:          629,
		VotingPower:          tz.Some(int64(18121953297364)),
		CurrentBallot:        tz.None[core.BallotKind](),
		CurrentProposals:     []*tz.ProtocolHash{},
		RemainingProposals:   20,
		ActiveConsensusKey:   &tz.P256PublicKeyHash{0xe1, 0x94, 0x71, 0xe8, 0x61, 0x1f, 0xcb, 0x3, 0xc3, 0x4c, 0x45, 0x99, 0xb0, 0x19, 0xc9, 0xc8, 0x68, 0x67, 0xb4, 0x47},
		PendingConsensusKeys: []*PendingConsensusKey{},
	}

	var out DelegateInfo
	_, err := encoding.Decode(src, &out, encoding.Dynamic())
	if !assert.NoError(t, err) {
		if err, ok := err.(*encoding.Error); ok {
			fmt.Println(err.Path)
		}
	} else {
		require.Equal(t, &expect, &out)
	}
}

func TestConstants(t *testing.T) {
	src := []byte{
		0x00, 0x00, 0x01, 0x34, 0x08, 0x20, 0x84, 0x00, 0x00, 0x80, 0x00, 0x14, 0x00, 0x00, 0xc3, 0x50,
		0x00, 0x00, 0xc3, 0x50, 0x00, 0x00, 0x27, 0x10, 0x03, 0x07, 0xd1, 0x00, 0x00, 0x75, 0x30, 0x00,
		0x00, 0x10, 0x00, 0xc0, 0x84, 0x3d, 0x05, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
		0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x80, 0xfa, 0x7e, 0x80, 0xb1,
		0xbd, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xf8, 0x82, 0xad, 0x16, 0x00,
		0x00, 0x00, 0x01, 0xdc, 0xd6, 0x50, 0x00, 0xc8, 0xd0, 0x07, 0x00, 0x00, 0x01, 0x01, 0xc0, 0x96,
		0xb1, 0x02, 0xdf, 0x10, 0x94, 0x0b, 0xfa, 0x01, 0xa0, 0xa9, 0x07, 0x00, 0x00, 0x07, 0xd0, 0x00,
		0x00, 0x1b, 0x58, 0x00, 0x00, 0x01, 0xf4, 0xd0, 0xa5, 0x4c, 0x3b, 0x9a, 0xca, 0x00, 0x00, 0xf0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x1b, 0x58, 0x00, 0x00, 0x12, 0x3b, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x0a, 0x80, 0xc0, 0x96, 0xb1, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x05,
		0xf5, 0xe1, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x0f, 0xa0, 0x00, 0x07, 0xa1, 0x20, 0x00, 0x00,
		0x13, 0x88, 0x00, 0x00, 0x00, 0x0f, 0x80, 0xc8, 0xaf, 0xa0, 0x25, 0x00, 0x00, 0x9c, 0x40, 0x00,
		0x00, 0x9c, 0x40, 0x00, 0x00, 0x9c, 0xa4, 0x00, 0x00, 0x03, 0xf2, 0x00, 0x01, 0x38, 0xe4, 0x00,
		0x00, 0x00, 0x78, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x75, 0x30, 0x00, 0x35, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x01, 0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x10, 0x10, 0x00, 0x00, 0x10, 0x00,
		0x00, 0x08, 0x00, 0xff, 0x00, 0x00, 0x00, 0x18, 0xaa, 0x00, 0x01, 0x3b, 0x00, 0x80, 0xc8, 0xaf,
		0xa0, 0x25, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x02, 0xa3, 0x00, 0x00, 0x01, 0x3b, 0x00, 0x00, 0x00,
		0x00, 0x64, 0x20, 0x00, 0x00, 0x9d, 0x80, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x20, 0x00,
		0x00, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x0a,
	}

	expect := Constants{
		ProofOfWorkNonceSize:                             0x8,
		NonceLength:                                      0x20,
		MaxAnonOpsPerBlock:                               0x84,
		MaxOperationDataLength:                           32768,
		MaxProposalsPerDelegate:                          0x14,
		MaxMichelineNodeCount:                            50000,
		MaxMichelineBytesLimit:                           50000,
		MaxAllowedGlobalConstantsDepth:                   10000,
		CacheLayoutSize:                                  0x3,
		MichelsonMaximumTypeSize:                         0x7d1,
		SmartRollupMaxWrappedProofBinarySize:             30000,
		SmartRollupMessageSizeLimit:                      4096,
		SmartRollupMaxNumberOfMessagesPerLevel:           tz.BigUint{0xc0, 0x84, 0x3d},
		PreservedCycles:                                  0x5,
		BlocksPerCycle:                                   16384,
		BlocksPerCommitment:                              128,
		NonceRevelationThreshold:                         512,
		BlocksPerStakeSnapshot:                           1024,
		CyclesPerVotingPeriod:                            5,
		HardGasLimitPerOperation:                         tz.BigInt{0x80, 0xfa, 0x7e},
		HardGasLimitPerBlock:                             tz.BigInt{0x80, 0xb1, 0xbd, 0x2},
		ProofOfWorkThreshold:                             281474976710655,
		MinimalStake:                                     tz.BigUint{0x80, 0xf8, 0x82, 0xad, 0x16},
		VDFDifficulty:                                    8000000000,
		SeedNonceRevelationTip:                           tz.BigUint{0xc8, 0xd0, 0x7},
		OriginationSize:                                  257,
		BakingRewardFixedPortion:                         tz.BigUint{0xc0, 0x96, 0xb1, 0x2},
		BakingRewardBonusPerSlot:                         tz.BigUint{0xdf, 0x10},
		EndorsingRewardPerSlot:                           tz.BigUint{0x94, 0xb},
		CostPerByte:                                      tz.BigUint{0xfa, 0x1},
		HardStorageLimitPerOperation:                     tz.BigInt{0xa0, 0xa9, 0x7},
		QuorumMin:                                        2000,
		QuorumMax:                                        7000,
		MinProposalQuorum:                                500,
		LiquidityBakingSubsidy:                           tz.BigUint{0xd0, 0xa5, 0x4c},
		LiquidityBakingToggleEmaThreshold:                1000000000,
		MaxOperationsTimeToLive:                          240,
		MinimalBlockDelay:                                15,
		DelayIncrementPerRound:                           8,
		ConsensusCommitteeSize:                           7000,
		ConsensusThreshold:                               4667,
		MinimalParticipationRatio:                        core.Rat{0x2, 0x3},
		MaxSlashingPeriod:                                2,
		FrozenDepositsPercentage:                         10,
		DoubleBakingPunishment:                           tz.BigUint{0x80, 0xc0, 0x96, 0xb1, 0x2},
		RatioOfFrozenDepositsSlashedPerDoubleEndorsement: core.Rat{0x1, 0x2},
		TestnetDictator:                                  tz.None[tz.PublicKeyHash](),
		InitialSeed:                                      tz.None[*tz.Bytes32](),
		CacheScriptSize:                                  100000000,
		CacheStakeDistributionCycles:                     8,
		CacheSamplerStateCycles:                          8,
		TxRollupEnable:                                   false,
		TxRollupOriginationSize:                          4000,
		TxRollupHardSizeLimitPerInbox:                    500000,
		TxRollupHardSizeLimitPerMessage:                  5000,
		TxRollupMaxWithdrawalsPerBatch:                   15,
		TxRollupCommitmentBond:                           tz.BigUint{0x80, 0xc8, 0xaf, 0xa0, 0x25},
		TxRollupFinalityPeriod:                           40000,
		TxRollupWithdrawPeriod:                           40000,
		TxRollupMaxInboxesCount:                          40100,
		TxRollupMaxMessagesPerInbox:                      1010,
		TxRollupMaxCommitmentsCount:                      80100,
		TxRollupCostPerByteEmaFactor:                     120,
		TxRollupMaxTicketPayloadSize:                     2048,
		TxRollupRejectionMaxProofSize:                    30000,
		TxRollupSunsetLevel:                              3473409,
		DALParametric: DALParametric{
			FeatureEnable:        false,
			NumberOfSlots:        256,
			AttestationLag:       1,
			AttestationThreshold: 50,
			BlocksPerEpoch:       32,
			RedundancyFactor:     0x10,
			PageSize:             0x1000,
			SlotSize:             1048576,
			NumberOfShards:       0x800,
		},
		SmartRollupEnable:                         true,
		SmartRollupArithPvmEnable:                 false,
		SmartRollupOriginationSize:                6314,
		SmartRollupChallengeWindowInBlocks:        80640,
		SmartRollupStakeAmount:                    tz.BigUint{0x80, 0xc8, 0xaf, 0xa0, 0x25},
		SmartRollupCommitmentPeriodInBlocks:       60,
		SmartRollupMaxLookaheadInBlocks:           172800,
		SmartRollupMaxActiveOutboxLevels:          80640,
		SmartRollupMaxOutboxMessagesPerLevel:      100,
		SmartRollupNumberOfSectionsInDissection:   0x20,
		SmartRollupTimeoutPeriodInBlocks:          40320,
		SmartRollupMaxNumberOfCementedCommitments: 5,
		SmartRollupMaxNumberOfParallelGames:       32,
		ZkRollupEnable:                            false,
		ZkRollupOriginationSize:                   4000,
		ZkRollupMinPendingToProcess:               10,
	}

	var out Constants
	_, err := encoding.Decode(src, &out, encoding.Dynamic())
	if !assert.NoError(t, err) {
		if err, ok := err.(*encoding.Error); ok {
			fmt.Println(err.Path)
		}
	} else {
		require.Equal(t, &expect, &out)
	}
}
