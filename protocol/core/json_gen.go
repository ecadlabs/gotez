package core

import "encoding/json"

// Code generated by genmarshaller.go DO NOT EDIT.

type json_suppress_OperationResultApplied[T any] OperationResultApplied[T]

func (self *OperationResultApplied[T]) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_OperationResultApplied[T])(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "applied"
	return json.Marshal(tmp)
}


type json_suppress_OperationResultBacktracked[T any] OperationResultBacktracked[T]

func (self *OperationResultBacktracked[T]) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_OperationResultBacktracked[T])(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "backtracked"
	return json.Marshal(tmp)
}


type json_suppress_OperationResultErrors OperationResultErrors

func (self *OperationResultErrors) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_OperationResultErrors)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "failed"
	return json.Marshal(tmp)
}


type json_suppress_OperationResultSkipped OperationResultSkipped

func (self *OperationResultSkipped) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_OperationResultSkipped)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "skipped"
	return json.Marshal(tmp)
}


type json_suppress_TestChainStatusForking TestChainStatusForking

func (self *TestChainStatusForking) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_TestChainStatusForking)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "forking"
	return json.Marshal(tmp)
}


type json_suppress_TestChainStatusRunning TestChainStatusRunning

func (self *TestChainStatusRunning) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal((*json_suppress_TestChainStatusRunning)(self))
	if err != nil {
		return nil, err
	}

	var tmp map[string]any
	if err = json.Unmarshal(buf, &tmp); err != nil {
		return nil, err
	}

	tmp["status"] = "running"
	return json.Marshal(tmp)
}


