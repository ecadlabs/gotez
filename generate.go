//go:build ignore

package main

import (
	"log"
	"os"
	"text/template"
)

type mapping struct {
	Type          string
	Length        string
	Prefix        string
	GenDecodeFunc bool
}

const outName = "types_gen.go"

var data = []mapping{
	{
		Type:          "BlockHash",
		Length:        "BlockHashBytesLen",
		Prefix:        "PfxBlockHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "OperationsHash",
		Length:        "OperationListListHashBytesLen",
		Prefix:        "PfxOperationListListHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "ContextHash",
		Length:        "ContextHashBytesLen",
		Prefix:        "PfxContextHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "ChainID",
		Length:        "ChainIdBytesLen",
		Prefix:        "PfxChainID",
		GenDecodeFunc: true,
	},
	{
		Type:          "BlockPayloadHash",
		Length:        "BlockPayloadHashBytesLen",
		Prefix:        "PfxValueHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "CycleNonceHash",
		Length:        "CycleNonceBytesLen",
		Prefix:        "PfxCycleNonce",
		GenDecodeFunc: true,
	},
	{
		Type:          "Signature",
		Length:        "GenericSignatureBytesLen",
		Prefix:        "PfxGenericSignature",
		GenDecodeFunc: true,
	},
	{
		Type:          "Ed25519PublicKeyHash",
		Length:        "PKHBytesLen",
		Prefix:        "PfxEd25519PublicKeyHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "Secp256k1PublicKeyHash",
		Length:        "PKHBytesLen",
		Prefix:        "PfxSecp256k1PublicKeyHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "P256PublicKeyHash",
		Length:        "PKHBytesLen",
		Prefix:        "PfxP256PublicKeyHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "BLSPublicKeyHash",
		Length:        "PKHBytesLen",
		Prefix:        "PfxBLS12_381PublicKeyHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "ProtocolHash",
		Length:        "ProtocolHashBytesLen",
		Prefix:        "PfxProtocolHash",
		GenDecodeFunc: true,
	},
	{
		Type:          "ContractHash",
		Length:        "ContractHashBytesLen",
		Prefix:        "PfxContractHash",
		GenDecodeFunc: true,
	},
	{
		Type:   "Ed25519PublicKey",
		Length: "Ed25519PublicKeyBytesLen",
		Prefix: "PfxEd25519PublicKey",
	},
	{
		Type:   "Secp256k1PublicKey",
		Length: "Secp256k1PublicKeyBytesLen",
		Prefix: "PfxSecp256k1PublicKey",
	},
	{
		Type:   "P256PublicKey",
		Length: "P256PublicKeyBytesLen",
		Prefix: "PfxP256PublicKey",
	},
	{
		Type:   "BLSPublicKey",
		Length: "BLSPublicKeyBytesLen",
		Prefix: "PfxBLS12_381PublicKey",
	},
	{
		Type:   "Ed25519PrivateKey",
		Length: "Ed25519SeedBytesLen",
		Prefix: "PfxEd25519Seed",
	},
	{
		Type:   "Secp256k1PrivateKey",
		Length: "Secp256k1PrivateKeyBytesLen",
		Prefix: "PfxSecp256k1SecretKey",
	},
	{
		Type:   "P256PrivateKey",
		Length: "P256PrivateKeyBytesLen",
		Prefix: "PfxP256SecretKey",
	},
	{
		Type:   "BLSPrivateKey",
		Length: "BLSPrivateKeyBytesLen",
		Prefix: "PfxBLS12_381SecretKey",
	},
	{
		Type:   "Ed25519EncryptedPrivateKey",
		Length: "Ed25519EncryptedSeedBytesLen",
		Prefix: "PfxEd25519EncryptedSeed",
	},
	{
		Type:   "Secp256k1EncryptedPrivateKey",
		Length: "Secp256k1EncryptedPrivateKeyBytesLen",
		Prefix: "PfxSecp256k1EncryptedSecretKey",
	},
	{
		Type:   "P256EncryptedPrivateKey",
		Length: "P256EncryptedPrivateKeyBytesLen",
		Prefix: "PfxP256EncryptedSecretKey",
	},
	{
		Type:   "BLSEncryptedPrivateKey",
		Length: "BLSEncryptedPrivateKeyBytesLen",
		Prefix: "PfxBLS12_381EncryptedSecretKey",
	},
}

const tplSrc = `package gotez

import "fmt"

// Code generated by generate.go DO NOT EDIT.
{{range .}}
type {{.Type}} [{{.Length}}]byte

func (self *{{.Type}}) String() string {
	return string(self.Base58())
}

func (self *{{.Type}}) Base58() []byte {
	out, err := EncodeTZBase58(&{{.Prefix}}, self[:])
	if err != nil {
		panic(err)
	}
	return out
}

{{- if .GenDecodeFunc}}
func New{{.Type}}FromBase58(src []byte) (*{{.Type}}, error) {
	prefix, payload, err := DecodeTZBase58(src)
	if err != nil {
		return nil, err
	}
	if prefix != &{{.Prefix}} {
		return nil, fmt.Errorf("gotez: invalid {{.Type}} encoding")
	}
	var out {{.Type}}
	copy(out[:], payload)
	return &out, nil
}
{{- end}}
{{end}}
`

var tpl = template.Must(template.New("generate").Parse(tplSrc))

func main() {
	fd, err := os.Create(outName)
	if err != nil {
		log.Fatal(err)
	}
	defer fd.Close()
	if err = tpl.Execute(fd, data); err != nil {
		log.Fatal(err)
	}
}
